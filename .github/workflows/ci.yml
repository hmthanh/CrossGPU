name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        run: cargo test --all --verbose

  build-native:
    name: Build Native
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build all packages
        run: cargo build --release --all
      
      - name: Build example
        run: cargo build --release --example simple-inference

  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Build WASM
        run: |
          cd wasm
          wasm-pack build --target web --release
      
      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasm-build
          path: wasm/pkg/

  deploy-wasm:
    name: Deploy WASM to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-wasm
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Build WASM
        run: |
          cd wasm
          wasm-pack build --target web --release
      
      - name: Create demo page
        run: |
          mkdir -p gh-pages
          cp -r wasm/pkg/* gh-pages/
          cat > gh-pages/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>CrossGPU WASM Demo</title>
              <style>
                  body {
                      font-family: Arial, sans-serif;
                      max-width: 800px;
                      margin: 50px auto;
                      padding: 20px;
                  }
                  .status { margin: 20px 0; padding: 10px; background: #f0f0f0; }
                  button { padding: 10px 20px; font-size: 16px; }
              </style>
          </head>
          <body>
              <h1>CrossGPU Tiny Transformer - WASM Demo</h1>
              <div class="status" id="status">Loading...</div>
              <button onclick="runInference()">Run Inference</button>
              <div id="output"></div>
              
              <script type="module">
                  import init, { greet, WasmTransformer } from './crossgpu_wasm.js';
                  
                  let transformer = null;
                  
                  async function initialize() {
                      await init();
                      document.getElementById('status').textContent = greet('Browser');
                      
                      try {
                          transformer = await new WasmTransformer();
                          document.getElementById('status').textContent = 
                              'Ready! Device: ' + transformer.device_name();
                      } catch (e) {
                          document.getElementById('status').textContent = 
                              'WebGPU not available: ' + e;
                      }
                  }
                  
                  window.runInference = async function() {
                      if (!transformer) {
                          alert('Transformer not initialized');
                          return;
                      }
                      
                      document.getElementById('output').textContent = 'Running inference...';
                      try {
                          const input = [1, 2, 3, 4, 5];
                          const output = await transformer.inference(input);
                          document.getElementById('output').textContent = 
                              'Output: ' + output.slice(0, 10).join(', ') + '...';
                      } catch (e) {
                          document.getElementById('output').textContent = 'Error: ' + e;
                      }
                  };
                  
                  initialize();
              </script>
          </body>
          </html>
          EOF
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
